<?php

namespace app\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\web\IdentityInterface;
use yii\base\Model;

/**
 * This is the model class for table "user".
 *
 * @property int $id
 * @property string $email
 * @property string $name
 * @property string $surname
 * @property string $patronymic
 * @property string $password
 * @property int $active
 * @property int $role
 *  @property string $secret_key
 *  @property string $auth_key
 * @property NumberGroup[] $numberGroups
 * @property StudyEvent[] $studyEvents
 * @property TeacherPerformance[] $teacherPerformances
 */
class User extends \yii\db\ActiveRecord implements IdentityInterface
{
    const ACTIVE_DELETED = 0;
    const ACTIVE_NOT_ACTIVE = 1;
    const ACTIVE_ACTIVE = 10;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user';
    }



    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['email', 'name', 'surname', 'patronymic', 'password'], 'required'],
            [['email', 'name', 'surname', 'patronymic', 'password'], 'string', 'max' => 255],
            [['name', 'surname', 'patronymic'], 'match', 'pattern' => '/^[а-яА-Я -]*$/u',
                'message' => 'Разрешены только кириллица, пробел или тире'],
            [['email'], 'unique'],
            [['secret_key'], 'unique'],
            [['auth_key'], 'unique'],

            ['email', 'email'],
            [['password'], 'string', 'min' => 6],
            ['active', 'default', 'value' => User::ACTIVE_ACTIVE, 'on' => 'default'],
            ['active', 'in', 'range' =>[
                User::ACTIVE_NOT_ACTIVE,
                User::ACTIVE_ACTIVE
            ]],
            ['active', 'default', 'value' => User::ACTIVE_NOT_ACTIVE, 'on' => 'emailActivation'],
        ];
    }

//    public function beforeSave($insert)
//    {
//        if ($this->isNewRecord){
//            $this->password = md5($this->password);
//        }
//        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
//    }


    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'email' => 'Email',
            'name' => 'Имя',
            'surname' => 'Фамилия',
            'patronymic' => 'Отчество',
            'password' => 'Пароль',
            'active' => 'Active',
            'role' => 'Role',

        ];
    }

    /**
     * Gets query for [[NumberGroups]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getNumberGroups()
    {
        return $this->hasMany(NumberGroup::className(), ['id_user' => 'id']);
    }

    /**
     * Gets query for [[StudyEvents]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getStudyEvents()
    {
        return $this->hasMany(StudyEvent::className(), ['id_user' => 'id']);
    }

    /**
     * Gets query for [[TeacherPerformances]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getTeacherPerformances()
    {
        return $this->hasMany(TeacherPerformance::className(), ['id_user' => 'id']);
    }



    public static function findIdentity($id)
    {
        return static::findOne($id);
    }

    /**
     * Finds an identity by the given token.
     *
     * @param string $token the token to be looked for
     * @return IdentityInterface|null the identity object that matches the given token.
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        return null;
    }

    /**
     * @return int|string current user ID
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @return string|null current user auth key
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * @param string $authKey
     * @return bool|null if auth key is valid for current user
     */
    public function validateAuthKey($authKey)
    {
        return $this->auth_key === $authKey;
    }

    public function validatePassword($password) {
        if(is_null($this->password)) {
            return false;
        }
        return Yii::$app->getSecurity()->validatePassword($password, $this->password);
    }

    public static function findByUsername($email)
    {

        return User::findOne(['email' => $email]);;
    }

    public function isAdmin()
    {
        return $this->role === 1;
    }


    public function isModerator()
    {
        return $this->role === 2;
    }

    public static function isSecretKeyExpire($key)
    {
        if (empty($key))
        {
            return false;
        }
        $expire = Yii::$app->params['secretKeyExpire'];
        $parts = explode('_', $key);
        $timestamp = (int) end($parts);

        return $timestamp + $expire >= time();
    }

    public static function findBySecretKey($key)
    {
        if (!static::isSecretKeyExpire($key))
        {
            return null;
        }
        return static::findOne([
            'secret_key' => $key,
        ]);
    }

    public function generateSecretKey()
    {
        $this->secret_key = Yii::$app->security->generateRandomString().'_'.time();
    }

    public function removeSecretKey()
    {
        $this->secret_key = null;
    }

    public function setPassword($password)
    {
        $this->password = Yii::$app->security->generatePasswordHash($password);
    }

    public function generateAuthKey(){
        $this->auth_key = Yii::$app->security->generateRandomString();
    }

    public function create()
    {
        $user = new User();
        $user->name = $this->name;
        $user->surname = $this->surname;
        $user->patronymic = $this->patronymic;
        $user->email = $this->email;
        $user->active = $this->active;
        $user->setPassword($this->password);
        $user->generateAuthKey();
        if($this->scenario === 'emailActivation')
            $user->generateSecretKey();
        return $user->save() ? $user : null;
    }

    public function sendActivationEmail($user)
    {
        return Yii::$app->mailer->compose('activationEmail', ['user' => $user])
            ->setFrom([Yii::$app->params['supportEmail'] => Yii::$app->name.' (отправлено роботом).'])
            ->setTo($this->email)
            ->setSubject('Активация для '.Yii::$app->name)
            ->send();
    }


}
